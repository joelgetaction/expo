{"version":3,"file":"events.js","sourceRoot":"","sources":["../../src/utils/events.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAEpE,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AAItD,MAAM,eAAe,GAAoC,EAAE,CAAC;AAC5D,MAAM,oBAAoB,GAA+B,EAAE,CAAC;AAE5D,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,MAAkB,EAAE,SAAiB,EAAU,EAAE,CAC/E,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,SAAS,EAAE,CAAC;AAEpC,MAAM,gBAAgB,GAAG,CAAC,UAA8B,EAAE,MAAkB,EAAgB,EAAE;IAC5F,MAAM,IAAI,GAAG,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IACjD,MAAM,YAAY,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC;IACpD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;QAC1B,eAAe,CAAC,IAAI,CAAC,GAAG,IAAI,YAAY,CAAC,YAAY,CAAC,CAAC;KACxD;IACD,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC;AAC/B,CAAC,CAAC;AAEF;;;;;;;;;GASG;AACH,MAAM,6BAA6B,GAAG,CACpC,UAA8B,EAC9B,MAAkB,EAClB,SAAiB,EACX,EAAE;IACR,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,EAAE;QACpC,MAAM,aAAa,GAAG,gBAAgB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAC3D,aAAa,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,KAAU,EAAE,EAAE;YAClD,IAAI,KAAK,CAAC,OAAO,EAAE;gBACjB,yEAAyE;gBACzE,kBAAkB,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,OAAO,IAAI,SAAS,EAAE,EAAE,KAAK,CAAC,CAAC;aACjE;iBAAM;gBACL,qCAAqC;gBACrC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;aAC3C;QACH,CAAC,CAAC,CAAC;QAEH,oBAAoB,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;KACxC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kCAAkC,GAAG,CAChD,MAAkB,EAClB,MAA4B,EACtB,EAAE;IACR,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;IACtC,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE;QAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YACjD,6BAA6B,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9D;KACF;AACH,CAAC,CAAC","sourcesContent":["import { NativeModulesProxy, EventEmitter } from '@unimodules/core';\n\nimport SharedEventEmitter from './SharedEventEmitter';\nimport ModuleBase from './ModuleBase';\nimport { FirebaseModuleConfig, FirebaseModuleName } from '../types';\n\nconst NATIVE_EMITTERS: { [key: string]: EventEmitter } = {};\nconst NATIVE_SUBSCRIPTIONS: { [key: string]: boolean } = {};\n\nexport const getAppEventName = (module: ModuleBase, eventName: string): string =>\n  `${module.app.name}-${eventName}`;\n\nconst getNativeEmitter = (moduleName: FirebaseModuleName, module: ModuleBase): EventEmitter => {\n  const name = getAppEventName(module, moduleName);\n  const nativeModule = NativeModulesProxy[moduleName];\n  if (!NATIVE_EMITTERS[name]) {\n    NATIVE_EMITTERS[name] = new EventEmitter(nativeModule);\n  }\n  return NATIVE_EMITTERS[name];\n};\n\n/**\n * Subscribe to a native event for js side distribution by appName\n *    React Native events are hard set at compile - cant do dynamic event names\n *    so we use a single event send it to js and js then internally can prefix it\n *    and distribute dynamically.\n *\n * @param module\n * @param eventName\n * @private\n */\nconst subscribeToNativeModuleEvents = (\n  moduleName: FirebaseModuleName,\n  module: ModuleBase,\n  eventName: string\n): void => {\n  if (!NATIVE_SUBSCRIPTIONS[eventName]) {\n    const nativeEmitter = getNativeEmitter(moduleName, module);\n    nativeEmitter.addListener(eventName, (event: any) => {\n      if (event.appName) {\n        // native event has an appName property - auto prefix and internally emit\n        SharedEventEmitter.emit(`${event.appName}-${eventName}`, event);\n      } else {\n        // standard event - no need to prefix\n        SharedEventEmitter.emit(eventName, event);\n      }\n    });\n\n    NATIVE_SUBSCRIPTIONS[eventName] = true;\n  }\n};\n\nexport const initialiseNativeModuleEventEmitter = (\n  module: ModuleBase,\n  config: FirebaseModuleConfig\n): void => {\n  const { events, moduleName } = config;\n  if (events && events.length) {\n    for (let i = 0, len = events.length; i < len; i++) {\n      subscribeToNativeModuleEvents(moduleName, module, events[i]);\n    }\n  }\n};\n"]}