{"version":3,"file":"parseConfig.js","sourceRoot":"","sources":["../../src/utils/parseConfig.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from '@unimodules/core';\n\nimport { isObject, isString } from './';\n\nconst isAndroid = Platform.OS === 'android';\n\nfunction isValidString(str?: string): boolean {\n  return isString(str) && str !== '';\n}\n\nexport function guessProjectId({\n  storageBucket,\n  authDomain,\n  databaseURL,\n}: {\n  storageBucket?: string;\n  authDomain?: string;\n  databaseURL?: string;\n}): string | undefined {\n  function extractFromUrl(url) {\n    if (!isValidString(url)) return;\n    const first = url.split('.')[0];\n    if (!isValidString(first)) return;\n    return first.replace(/(^\\w+:|^)\\/\\//, '');\n  }\n  const projectId =\n    extractFromUrl(databaseURL) || extractFromUrl(storageBucket) || extractFromUrl(authDomain);\n  return projectId;\n}\n\nexport function parseCommonConfig(data: { [key: string]: any }): { [key: string]: any } {\n  if (!isValidString(data.projectId)) {\n    data.projectId = guessProjectId(data);\n    if (isValidString(data.projectId)) {\n      return parseCommonConfig(data);\n    }\n  } else {\n    if (!isValidString(data.databaseURL))\n      data.databaseURL = `https://${data.projectId}.firebaseio.com`;\n    if (!isValidString(data.storageBucket)) data.storageBucket = `${data.projectId}.appspot.com`;\n    if (!isValidString(data.authDomain)) data.authDomain = `${data.projectId}.firebaseapp.com`;\n  }\n  return data;\n}\n\nexport function parseAndroidConfig(data: { [key: string]: any }): { [key: string]: any } {\n  const { project_info, client } = data;\n\n  if (isObject(project_info)) {\n    if (!data.messagingSenderId && project_info.project_number)\n      data.messagingSenderId = project_info.project_number;\n    if (!data.databaseURL && project_info.firebase_url)\n      data.databaseURL = project_info.firebase_url;\n    if (!data.projectId && project_info.project_id) data.projectId = project_info.project_id;\n    if (!data.storageBucket && project_info.storage_bucket)\n      data.storageBucket = project_info.storage_bucket;\n  }\n\n  function destructureArray(obj) {\n    if (obj && Array.isArray(obj) && obj.length && isObject(obj[0])) return obj[0];\n  }\n\n  const firstClient = destructureArray(client);\n  if (firstClient) {\n    const { client_info } = firstClient;\n\n    if (isObject(client_info) && !data.appId && client_info.mobilesdk_app_id)\n      data.appId = client_info.mobilesdk_app_id;\n\n    const firstOAuthClient = destructureArray(firstClient.oauth_client);\n    if (!data.clientId && firstOAuthClient && firstOAuthClient.client_id)\n      data.clientId = firstOAuthClient.client_id;\n\n    const firstAPIKey = destructureArray(firstClient.api_key);\n    if (!data.apiKey && firstAPIKey && firstAPIKey.current_key)\n      data.apiKey = firstAPIKey.current_key;\n  }\n\n  return data;\n}\n\nexport function parseIosConfig(plist: { [key: string]: any }): { [key: string]: any } {\n  const desiredKeys = {\n    appId: 'GOOGLE_APP_ID',\n    apiKey: 'API_KEY',\n    databaseURL: 'DATABASE_URL',\n    messagingSenderId: 'GCM_SENDER_ID',\n    projectId: 'PROJECT_ID',\n    storageBucket: 'STORAGE_BUCKET',\n    authDomain: 'AUTH_DOMAIN',\n    clientId: 'CLIENT_ID',\n    deepLinkURLScheme: 'DEEP_LINK_URL_SCHEME',\n    reversedClientId: 'REVERSED_CLIENT_ID',\n    adUnitIdForInterstitialTest: 'AD_UNIT_ID_FOR_INTERSTITIAL_TEST',\n    adUnitIdForBannerTest: 'AD_UNIT_ID_FOR_BANNER_TEST',\n  };\n\n  Object.entries(desiredKeys).forEach(entry => {\n    const [key, value] = entry;\n    if (plist[key] === undefined && plist[value]) {\n      plist[key] = plist[value];\n    }\n  });\n  return plist;\n}\n\nexport default function parseConfig(config: { [key: string]: any }): { [key: string]: any } {\n  if (isAndroid) {\n    config = parseAndroidConfig(config);\n  } else {\n    config = parseIosConfig(config);\n  }\n  config = parseCommonConfig(config);\n  return config;\n}\n"]}