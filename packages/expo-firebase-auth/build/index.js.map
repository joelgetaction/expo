{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from '@unimodules/core';\nimport { App, SharedEventEmitter, INTERNALS, ModuleBase } from 'expo-firebase-app';\n\nimport ConfirmationResult from './phone/ConfirmationResult';\nimport PhoneAuthListener from './phone/PhoneAuthListener';\nimport EmailAuthProvider from './providers/EmailAuthProvider';\nimport FacebookAuthProvider from './providers/FacebookAuthProvider';\nimport GithubAuthProvider from './providers/GithubAuthProvider';\nimport GoogleAuthProvider from './providers/GoogleAuthProvider';\nimport OAuthProvider from './providers/OAuthProvider';\nimport PhoneAuthProvider from './providers/PhoneAuthProvider';\nimport TwitterAuthProvider from './providers/TwitterAuthProvider';\nimport User from './User';\nimport AuthSettings from './AuthSettings';\n\n// providers\nimport {\n  ActionCodeInfo,\n  ActionCodeSettings,\n  AuthCredential,\n  NativeUser,\n  NativeUserCredential,\n  UserCredential,\n} from './types';\n\nconst isAndroid = Platform.OS === 'android';\n\ntype AuthState = {\n  user?: NativeUser;\n};\n\nconst NATIVE_EVENTS = {\n  authStateChanged: 'Expo.Firebase.auth_state_changed',\n  authIdTokenChanged: 'Expo.Firebase.auth_id_token_changed',\n  phoneAuthStateChanged: 'Expo.Firebase.phone_auth_state_changed',\n};\n\nexport const MODULE_NAME = 'ExpoFirebaseAuth';\nexport const NAMESPACE = 'auth';\nexport const statics = {\n  EmailAuthProvider,\n  PhoneAuthProvider,\n  GoogleAuthProvider,\n  GithubAuthProvider,\n  TwitterAuthProvider,\n  FacebookAuthProvider,\n  OAuthProvider,\n  PhoneAuthState: {\n    CODE_SENT: 'sent',\n    AUTO_VERIFY_TIMEOUT: 'timeout',\n    AUTO_VERIFIED: 'verified',\n    ERROR: 'error',\n  },\n};\n\nexport default class Auth extends ModuleBase {\n  static namespace = 'auth';\n  static moduleName = 'ExpoFirebaseAuth';\n  static statics = statics;\n\n  _authResult: boolean;\n  _languageCode: string;\n  _user: User | null;\n\n  constructor(app: App) {\n    super(app, {\n      statics,\n      events: Object.values(NATIVE_EVENTS),\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE,\n    });\n    this._user = null;\n    this._authResult = false;\n    this._languageCode =\n      this.nativeModule.APP_LANGUAGE[app._name] || this.nativeModule.APP_LANGUAGE['[DEFAULT]'];\n\n    SharedEventEmitter.addListener(\n      // sub to internal native event - this fans out to\n      // public event name: onAuthStateChanged\n      this.getAppEventName(NATIVE_EVENTS.authStateChanged),\n      (state: AuthState) => {\n        this._setUser(state.user);\n        SharedEventEmitter.emit(this.getAppEventName('onAuthStateChanged'), this._user);\n      }\n    );\n\n    SharedEventEmitter.addListener(\n      // sub to internal native event - this fans out to\n      // public events based on event.type\n      this.getAppEventName(NATIVE_EVENTS.phoneAuthStateChanged),\n      (event: { [key: string]: any }) => {\n        const eventKey = `phone:auth:${event.requestKey}:${event.type}`;\n        SharedEventEmitter.emit(eventKey, event.state);\n      }\n    );\n\n    SharedEventEmitter.addListener(\n      // sub to internal native event - this fans out to\n      // public event name: onIdTokenChanged\n      this.getAppEventName(NATIVE_EVENTS.authIdTokenChanged),\n      (auth: AuthState) => {\n        this._setUser(auth.user);\n        SharedEventEmitter.emit(this.getAppEventName('onIdTokenChanged'), this._user);\n      }\n    );\n\n    this.nativeModule.addAuthStateListener();\n    this.nativeModule.addIdTokenListener();\n  }\n\n  _setUser(user?: NativeUser): User | null {\n    this._user = user ? new User(this, user) : null;\n    this._authResult = true;\n    SharedEventEmitter.emit(this.getAppEventName('onUserChanged'), this._user);\n    return this._user;\n  }\n\n  _setUserCredential(userCredential: NativeUserCredential): UserCredential {\n    const user = new User(this, userCredential.user);\n    this._user = user;\n    this._authResult = true;\n    SharedEventEmitter.emit(this.getAppEventName('onUserChanged'), this._user);\n    return {\n      additionalUserInfo: userCredential.additionalUserInfo,\n      user,\n    };\n  }\n\n  /*\n   * WEB API\n   */\n\n  /**\n   * Listen for auth changes.\n   * @param listener\n   */\n  onAuthStateChanged(listener: Function) {\n    this.logger.info('Creating onAuthStateChanged listener');\n    SharedEventEmitter.addListener(this.getAppEventName('onAuthStateChanged'), listener);\n    if (this._authResult) listener(this._user || null);\n\n    return () => {\n      this.logger.info('Removing onAuthStateChanged listener');\n      SharedEventEmitter.removeListener(this.getAppEventName('onAuthStateChanged'), listener);\n    };\n  }\n\n  /**\n   * Listen for id token changes.\n   * @param listener\n   */\n  onIdTokenChanged(listener: Function) {\n    this.logger.info('Creating onIdTokenChanged listener');\n    SharedEventEmitter.addListener(this.getAppEventName('onIdTokenChanged'), listener);\n    if (this._authResult) listener(this._user || null);\n\n    return () => {\n      this.logger.info('Removing onIdTokenChanged listener');\n      SharedEventEmitter.removeListener(this.getAppEventName('onIdTokenChanged'), listener);\n    };\n  }\n\n  /**\n   * Listen for user changes.\n   * @param listener\n   */\n  onUserChanged(listener: Function) {\n    this.logger.info('Creating onUserChanged listener');\n    SharedEventEmitter.addListener(this.getAppEventName('onUserChanged'), listener);\n    if (this._authResult) listener(this._user || null);\n\n    return () => {\n      this.logger.info('Removing onUserChanged listener');\n      SharedEventEmitter.removeListener(this.getAppEventName('onUserChanged'), listener);\n    };\n  }\n\n  /**\n   * Sign the current user out\n   * @return {Promise}\n   */\n  async signOut(): Promise<void> {\n    await this.nativeModule.signOut();\n    this._setUser();\n  }\n\n  /**\n   * Sign a user in anonymously\n   *\n   * @return {Promise} A promise resolved upon completion\n   */\n  signInAnonymously(): Promise<UserCredential> {\n    return this.nativeModule\n      .signInAnonymously()\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  /**\n   * Sign a user in anonymously\n   *\n   * @deprecated Deprecated signInAnonymouslyAndRetrieveData in favor of signInAnonymously.\n   * @return {Promise} A promise resolved upon completion\n   */\n  signInAnonymouslyAndRetrieveData(): Promise<UserCredential> {\n    console.warn('Deprecated signInAnonymouslyAndRetrieveData in favor of signInAnonymously.');\n    return this.nativeModule\n      .signInAnonymously()\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  /**\n   * Create a user with the email/password functionality\n   *\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise indicating the completion\n   */\n  createUserWithEmailAndPassword(email: string, password: string): Promise<UserCredential> {\n    return this.nativeModule\n      .createUserWithEmailAndPassword(email, password)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  /**\n   * Create a user with the email/password functionality\n   *\n   * @deprecated Deprecated createUserAndRetrieveDataWithEmailAndPassword in favor of createUserWithEmailAndPassword.\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise indicating the completion\n   */\n  createUserAndRetrieveDataWithEmailAndPassword(\n    email: string,\n    password: string\n  ): Promise<UserCredential> {\n    console.warn(\n      'Deprecated createUserAndRetrieveDataWithEmailAndPassword in favor of createUserWithEmailAndPassword.'\n    );\n    return this.nativeModule\n      .createUserWithEmailAndPassword(email, password)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  /**\n   * Sign a user in with email/password\n   *\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise that is resolved upon completion\n   */\n  signInWithEmailAndPassword(email: string, password: string): Promise<UserCredential> {\n    return this.nativeModule\n      .signInWithEmailAndPassword(email, password)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  /**\n   * Sign a user in with email/password\n   *\n   * @deprecated Deprecated signInAndRetrieveDataWithEmailAndPassword in favor of signInWithEmailAndPassword\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise that is resolved upon completion\n   */\n  signInAndRetrieveDataWithEmailAndPassword(\n    email: string,\n    password: string\n  ): Promise<UserCredential> {\n    console.warn(\n      'Deprecated signInAndRetrieveDataWithEmailAndPassword in favor of signInWithEmailAndPassword.'\n    );\n    return this.nativeModule\n      .signInWithEmailAndPassword(email, password)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  /**\n   * Sign the user in with a custom auth token\n   *\n   * @param  {string} customToken  A self-signed custom auth token.\n   * @return {Promise}             A promise resolved upon completion\n   */\n  signInWithCustomToken(customToken: string): Promise<UserCredential> {\n    return this.nativeModule\n      .signInWithCustomToken(customToken)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  /**\n   * Sign the user in with a custom auth token\n   *\n   * @deprecated Deprecated signInAndRetrieveDataWithCustomToken in favor of signInWithCustomToken\n   * @param  {string} customToken  A self-signed custom auth token.\n   * @return {Promise}             A promise resolved upon completion\n   */\n  signInAndRetrieveDataWithCustomToken(customToken: string): Promise<UserCredential> {\n    console.warn(\n      'Deprecated signInAndRetrieveDataWithCustomToken in favor of signInWithCustomToken.'\n    );\n    return this.nativeModule\n      .signInWithCustomToken(customToken)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  /**\n   * Sign the user in with a third-party authentication provider\n   *\n   * @return {Promise}           A promise resolved upon completion\n   */\n  signInWithCredential(credential: AuthCredential): Promise<UserCredential> {\n    return this.nativeModule\n      .signInWithCredential(credential.providerId, credential.token, credential.secret)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  /**\n   * Sign the user in with a third-party authentication provider\n   *\n   * @deprecated Deprecated signInAndRetrieveDataWithCredential in favor of signInWithCredential.\n   * @return {Promise}           A promise resolved upon completion\n   */\n  signInAndRetrieveDataWithCredential(credential: AuthCredential): Promise<UserCredential> {\n    console.warn(\n      'Deprecated signInAndRetrieveDataWithCredential in favor of signInWithCredential.'\n    );\n    return this.nativeModule\n      .signInWithCredential(credential.providerId, credential.token, credential.secret)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  /**\n   * Asynchronously signs in using a phone number.\n   *\n   */\n  signInWithPhoneNumber(phoneNumber: string, forceResend?: boolean): Promise<ConfirmationResult> {\n    if (isAndroid) {\n      return this.nativeModule\n        .signInWithPhoneNumber(phoneNumber, forceResend || false)\n        .then(result => new ConfirmationResult(this, result.verificationId));\n    }\n\n    return this.nativeModule\n      .signInWithPhoneNumber(phoneNumber)\n      .then(result => new ConfirmationResult(this, result.verificationId));\n  }\n\n  /**\n   * Returns a PhoneAuthListener to listen to phone verification events,\n   * on the final completion event a PhoneAuthCredential can be generated for\n   * authentication purposes.\n   *\n   * @param phoneNumber\n   * @param autoVerifyTimeoutOrForceResend Android Only\n   * @param forceResend Android Only\n   * @returns {PhoneAuthListener}\n   */\n  verifyPhoneNumber(\n    phoneNumber: string,\n    autoVerifyTimeoutOrForceResend?: number | boolean,\n    forceResend?: boolean\n  ): PhoneAuthListener {\n    let _forceResend: boolean | undefined = forceResend;\n    let _autoVerifyTimeout: number | boolean | undefined = 60;\n\n    if (typeof autoVerifyTimeoutOrForceResend === 'boolean') {\n      _forceResend = autoVerifyTimeoutOrForceResend;\n    } else {\n      _autoVerifyTimeout = autoVerifyTimeoutOrForceResend;\n    }\n\n    return new PhoneAuthListener(this, phoneNumber, _autoVerifyTimeout, _forceResend);\n  }\n\n  /**\n   * Send reset password instructions via email\n   * @param {string} email The email to send password reset instructions\n   * @param actionCodeSettings\n   */\n  sendPasswordResetEmail(email: string, actionCodeSettings?: ActionCodeSettings): Promise<void> {\n    return this.nativeModule.sendPasswordResetEmail(email, actionCodeSettings);\n  }\n\n  /**\n   * Sends a sign-in email link to the user with the specified email\n   * @param {string} email The email account to sign in with.\n   * @param actionCodeSettings\n   */\n  sendSignInLinkToEmail(email: string, actionCodeSettings?: ActionCodeSettings): Promise<void> {\n    return this.nativeModule.sendSignInLinkToEmail(email, actionCodeSettings);\n  }\n\n  /**\n   * Checks if an incoming link is a sign-in with email link.\n   * @param {string} emailLink Sign-in email link.\n   */\n  isSignInWithEmailLink(emailLink: string): boolean {\n    return (\n      typeof emailLink === 'string' &&\n      (emailLink.includes('mode=signIn') || emailLink.includes('mode%3DsignIn')) &&\n      (emailLink.includes('oobCode=') || emailLink.includes('oobCode%3D'))\n    );\n  }\n\n  /**\n   * Asynchronously signs in using an email and sign-in email link.\n   *\n   * @param {string} email The email account to sign in with.\n   * @param {string} emailLink Sign-in email link.\n   * @return {Promise} A promise resolved upon completion\n   */\n  signInWithEmailLink(email: string, emailLink: string): Promise<UserCredential> {\n    return this.nativeModule\n      .signInWithEmailLink(email, emailLink)\n      .then(userCredential => this._setUserCredential(userCredential));\n  }\n\n  /**\n   * Completes the password reset process, given a confirmation code and new password.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.auth.Auth#confirmPasswordReset\n   * @param code\n   * @param newPassword\n   * @return {Promise.<Null>}\n   */\n  confirmPasswordReset(code: string, newPassword: string): Promise<void> {\n    return this.nativeModule.confirmPasswordReset(code, newPassword);\n  }\n\n  /**\n   * Applies a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.auth.Auth#applyActionCode\n   * @param code\n   * @return {Promise.<Null>}\n   */\n  applyActionCode(code: string): Promise<void> {\n    return this.nativeModule.applyActionCode(code);\n  }\n\n  /**\n   * Checks a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.auth.Auth#checkActionCode\n   * @param code\n   * @return {Promise.<any>|Promise<ActionCodeInfo>}\n   */\n  checkActionCode(code: string): Promise<ActionCodeInfo> {\n    return this.nativeModule.checkActionCode(code);\n  }\n\n  /**\n   * Returns a list of authentication methods that can be used to sign in a given user (identified by its main email address).\n   * @return {Promise}\n   */\n  fetchSignInMethodsForEmail(email: string): Promise<string[]> {\n    return this.nativeModule.fetchSignInMethodsForEmail(email);\n  }\n\n  verifyPasswordResetCode(code: string): Promise<string> {\n    return this.nativeModule.verifyPasswordResetCode(code);\n  }\n\n  /**\n   * Sets the language for the auth module.\n   *\n   * @param code\n   */\n  set languageCode(code: string) {\n    this._languageCode = code;\n    this.nativeModule.setLanguageCode(code);\n  }\n\n  /**\n   * The language for the auth module.\n   *\n   * @return {string}\n   */\n  get languageCode(): string {\n    return this._languageCode;\n  }\n\n  /**\n   * The current Auth instance's settings. This is used to edit/read configuration\n   * related options like app verification mode for phone authentication.\n   *\n   * @return {AuthSettings}\n   */\n\n  _settings?: AuthSettings;\n  get settings(): AuthSettings {\n    if (!this._settings) {\n      // lazy initialize\n      this._settings = new AuthSettings(this);\n    }\n    return this._settings;\n  }\n\n  /**\n   * Get the currently signed in user\n   * @return {Promise}\n   */\n  get currentUser(): User | null {\n    return this._user;\n  }\n\n  /**\n   * KNOWN UNSUPPORTED METHODS\n   */\n\n  getRedirectResult() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'getRedirectResult'));\n  }\n\n  setPersistence() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'setPersistence'));\n  }\n\n  signInWithPopup() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'signInWithPopup'));\n  }\n\n  signInWithRedirect() {\n    throw new Error(\n      INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'signInWithRedirect')\n    );\n  }\n\n  // firebase issue - https://github.com/invertase/react-native-firebase/pull/655#issuecomment-349904680\n  useDeviceLanguage() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'useDeviceLanguage'));\n  }\n}\n\nexport { User, AuthSettings };\n"]}