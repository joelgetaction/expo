{"version":3,"file":"UtilsModule.js","sourceRoot":"","sources":["../../src/utils/UtilsModule.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAEhE,OAAO,SAAS,MAAM,aAAa,CAAC;AACpC,OAAO,UAAU,MAAM,cAAc,CAAC;AAItC,MAAM,KAAK,GAAG,QAAQ,CAAC,EAAE,KAAK,KAAK,CAAC;AAEpC,MAAM,EAAE,eAAe,EAAE,GAAG,kBAAkB,CAAC;AAU/C,MAAM,CAAC,MAAM,WAAW,GAAG,mBAAmB,CAAC;AAC/C,MAAM,CAAC,MAAM,SAAS,GAAG,OAAO,CAAC;AAEjC,MAAM,CAAC,MAAM,OAAO,GAAG,EAAE,CAAC;AAE1B,MAAM,OAAO,iBAAkB,SAAQ,UAAU;IAK/C,YAAY,GAAQ;QAClB,KAAK,CAAC,GAAG,EAAE;YACT,UAAU,EAAE,WAAW;YACvB,kBAAkB,EAAE,KAAK;YACzB,mBAAmB,EAAE,KAAK;YAC1B,SAAS,EAAE,SAAS;SACrB,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,6BAA6B;QAC3B,IAAI,KAAK;YAAE,OAAO;QAElB,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,wBAAwB,CAAC;QAEjD,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,WAAW,EAAE;YAC9C,IACE,SAAS,CAAC,OAAO,CAAC,2BAA2B;gBAC7C,IAAI,CAAC,wBAAwB,CAAC,qBAAqB,EACnD;gBACA,IAAI,CAAC,qBAAqB,EAAE,CAAC;aAC9B;iBAAM;gBACL,MAAM,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;gBAC5D,IAAI,SAAS,CAAC,OAAO,CAAC,0BAA0B,EAAE;oBAChD,IAAI,MAAM,KAAK,CAAC;wBAAE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACtC,gDAAgD;;wBAC3C,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;iBAC7B;qBAAM;oBACL,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACrB;aACF;SACF;IACH,CAAC;IAED,KAAK,CAAC,qBAAqB;QACzB,IAAI,KAAK,EAAE;YACT,OAAO,IAAI,CAAC;SACb;QACD,OAAO,MAAM,eAAe,CAAC,qBAAqB,EAAE,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,qBAAqB;QACzB,IAAI,KAAK,EAAE;YACT,OAAO,IAAI,CAAC;SACb;QACD,OAAO,MAAM,eAAe,CAAC,qBAAqB,EAAE,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,yBAAyB;QAC7B,IAAI,KAAK,EAAE;YACT,OAAO,IAAI,CAAC;SACb;QACD,OAAO,MAAM,eAAe,CAAC,yBAAyB,EAAE,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,yBAAyB;QAC7B,IAAI,KAAK,EAAE;YACT,OAAO,IAAI,CAAC;SACb;QACD,OAAO,MAAM,eAAe,CAAC,yBAAyB,EAAE,CAAC;IAC3D,CAAC;IAED;;;;OAIG;IACH,IAAI,QAAQ,CAAC,QAAgB;QAC3B,SAAS,CAAC,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACxC,CAAC;IAED;;;;OAIG;IACH,IAAI,wBAAwB;QAC1B,OAAO,CACL,eAAe,CAAC,wBAAwB,IAAI;YAC1C,WAAW,EAAE,IAAI;YACjB,MAAM,EAAE,CAAC;SACV,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,IAAI,0BAA0B,CAAC,IAAa;QAC1C,SAAS,CAAC,OAAO,CAAC,0BAA0B,GAAG,IAAI,CAAC;IACtD,CAAC;IAED;;;;OAIG;IACH,IAAI,2BAA2B,CAAC,IAAa;QAC3C,SAAS,CAAC,OAAO,CAAC,2BAA2B,GAAG,IAAI,CAAC;IACvD,CAAC;;AA3GM,2BAAS,GAAG,SAAS,CAAC;AACtB,4BAAU,GAAG,WAAW,CAAC;AACzB,yBAAO,GAAG,OAAO,CAAC;AA4G3B,eAAe,iBAAiB,CAAC","sourcesContent":["import { NativeModulesProxy, Platform } from '@unimodules/core';\n\nimport INTERNALS from './internals';\nimport ModuleBase from './ModuleBase';\n\nimport App from '../app';\n\nconst isIOS = Platform.OS === 'ios';\n\nconst { ExpoFirebaseApp } = NativeModulesProxy;\n\ntype GoogleApiAvailabilityType = {\n  status: number;\n  isAvailable: boolean;\n  isUserResolvableError?: boolean;\n  hasResolution?: boolean;\n  error?: string;\n};\n\nexport const MODULE_NAME = 'ExpoFirebaseUtils';\nexport const NAMESPACE = 'utils';\n\nexport const statics = {};\n\nexport class ExpoFirebaseUtils extends ModuleBase {\n  static namespace = NAMESPACE;\n  static moduleName = MODULE_NAME;\n  static statics = statics;\n\n  constructor(app: App) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE,\n    });\n  }\n\n  /**\n   *\n   */\n  checkPlayServicesAvailability() {\n    if (isIOS) return;\n\n    const { status } = this.playServicesAvailability;\n\n    if (!this.playServicesAvailability.isAvailable) {\n      if (\n        INTERNALS.OPTIONS.promptOnMissingPlayServices &&\n        this.playServicesAvailability.isUserResolvableError\n      ) {\n        this.promptForPlayServices();\n      } else {\n        const error = INTERNALS.STRINGS.ERROR_PLAY_SERVICES(status);\n        if (INTERNALS.OPTIONS.errorOnMissingPlayServices) {\n          if (status === 2) console.warn(error);\n          // only warn if it exists but may need an update\n          else throw new Error(error);\n        } else {\n          console.warn(error);\n        }\n      }\n    }\n  }\n\n  async getPlayServicesStatus(): Promise<GoogleApiAvailabilityType | null> {\n    if (isIOS) {\n      return null;\n    }\n    return await ExpoFirebaseApp.getPlayServicesStatus();\n  }\n\n  async promptForPlayServices(): Promise<any | null> {\n    if (isIOS) {\n      return null;\n    }\n    return await ExpoFirebaseApp.promptForPlayServices();\n  }\n\n  async resolutionForPlayServices(): Promise<any | null> {\n    if (isIOS) {\n      return null;\n    }\n    return await ExpoFirebaseApp.resolutionForPlayServices();\n  }\n\n  async makePlayServicesAvailable(): Promise<any | null> {\n    if (isIOS) {\n      return null;\n    }\n    return await ExpoFirebaseApp.makePlayServicesAvailable();\n  }\n\n  /**\n   * Set the global logging level for all logs.\n   *\n   * @param logLevel\n   */\n  set logLevel(logLevel: string) {\n    INTERNALS.OPTIONS.logLevel = logLevel;\n  }\n\n  /**\n   * Returns props from the android GoogleApiAvailability sdk\n   * @android\n   * @return {ExpoFirebaseApp.GoogleApiAvailabilityType|{isAvailable: boolean, status: number}}\n   */\n  get playServicesAvailability(): GoogleApiAvailabilityType {\n    return (\n      ExpoFirebaseApp.playServicesAvailability || {\n        isAvailable: true,\n        status: 0,\n      }\n    );\n  }\n\n  /**\n   * Enable/Disable throwing an error or warning on detecting a play services problem\n   * @android\n   * @param bool\n   */\n  set errorOnMissingPlayServices(bool: boolean) {\n    INTERNALS.OPTIONS.errorOnMissingPlayServices = bool;\n  }\n\n  /**\n   * Enable/Disable automatic prompting of the play services update dialog\n   * @android\n   * @param bool\n   */\n  set promptOnMissingPlayServices(bool: boolean) {\n    INTERNALS.OPTIONS.promptOnMissingPlayServices = bool;\n  }\n}\n\nexport default ExpoFirebaseUtils;\n"]}