{"version":3,"file":"AndroidNotifications.js","sourceRoot":"","sources":["../src/AndroidNotifications.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from '@unimodules/core';\nimport invariant from 'invariant';\n\nimport AndroidChannel from './AndroidChannel';\nimport AndroidChannelGroup from './AndroidChannelGroup';\n\nimport { Notifications, NativeAndroidChannel, NativeAndroidChannelGroup } from './types';\n\nconst isAndroid = Platform.OS === 'android';\nexport default class AndroidNotifications {\n  _notifications: Notifications;\n\n  constructor(notifications: Notifications) {\n    this._notifications = notifications;\n  }\n\n  createChannel(channel: AndroidChannel): Promise<void> {\n    if (isAndroid) {\n      invariant(\n        channel instanceof AndroidChannel,\n        `AndroidNotifications:createChannel expects an 'AndroidChannel' but got type ${typeof channel}`\n      );\n      return this._notifications.nativeModule.createChannel(channel.build());\n    }\n    return Promise.resolve();\n  }\n\n  createChannelGroup(channelGroup: AndroidChannelGroup): Promise<void> {\n    if (isAndroid) {\n      invariant(\n        channelGroup instanceof AndroidChannelGroup,\n        `AndroidNotifications:createChannelGroup expects an 'AndroidChannelGroup' but got type ${typeof channelGroup}`\n      );\n      return this._notifications.nativeModule.createChannelGroup(channelGroup.build());\n    }\n    return Promise.resolve();\n  }\n\n  createChannelGroups(channelGroups: AndroidChannelGroup[]): Promise<void> {\n    if (isAndroid) {\n      invariant(\n        Array.isArray(channelGroups),\n        `AndroidNotifications:createChannelGroups expects an 'Array' but got type ${typeof channelGroups}`\n      );\n      const nativeChannelGroups: NativeAndroidChannelGroup[] = [];\n      for (let i = 0; i < channelGroups.length; i++) {\n        const channelGroup = channelGroups[i];\n        invariant(\n          channelGroup instanceof AndroidChannelGroup,\n          `AndroidNotifications:createChannelGroups expects array items of type 'AndroidChannelGroup' but got type ${typeof channelGroup}`\n        );\n        nativeChannelGroups.push(channelGroup.build());\n      }\n      return this._notifications.nativeModule.createChannelGroups(nativeChannelGroups);\n    }\n    return Promise.resolve();\n  }\n\n  createChannels(channels: AndroidChannel[]): Promise<void> {\n    if (isAndroid) {\n      invariant(\n        Array.isArray(channels),\n        `AndroidNotifications:createChannels expects an 'Array' but got type ${typeof channels}`\n      );\n      const nativeChannels: NativeAndroidChannel[] = [];\n      for (let i = 0; i < channels.length; i++) {\n        const channel = channels[i];\n        invariant(\n          channel instanceof AndroidChannel,\n          `AndroidNotifications:createChannels expects array items of type 'AndroidChannel' but got type ${typeof channel}`\n        );\n        nativeChannels.push(channel.build());\n      }\n      return this._notifications.nativeModule.createChannels(nativeChannels);\n    }\n    return Promise.resolve();\n  }\n\n  removeDeliveredNotificationsByTag(tag: string): Promise<void> {\n    if (isAndroid) {\n      invariant(\n        typeof tag === 'string',\n        `AndroidNotifications:removeDeliveredNotificationsByTag expects an 'string' but got type ${typeof tag}`\n      );\n      return this._notifications.nativeModule.removeDeliveredNotificationsByTag(tag);\n    }\n    return Promise.resolve();\n  }\n\n  deleteChannelGroup(groupId: string): Promise<void> {\n    if (isAndroid) {\n      invariant(\n        typeof groupId === 'string',\n        `AndroidNotifications:deleteChannelGroup expects an 'string' but got type ${typeof groupId}`\n      );\n      return this._notifications.nativeModule.deleteChannelGroup(groupId);\n    }\n    return Promise.resolve();\n  }\n\n  deleteChannel(channelId: string): Promise<void> {\n    if (isAndroid) {\n      invariant(\n        typeof channelId === 'string',\n        `AndroidNotifications:deleteChannel expects an 'string' but got type ${typeof channelId}`\n      );\n      return this._notifications.nativeModule.deleteChannel(channelId);\n    }\n    return Promise.resolve();\n  }\n}\n"]}