{"version":3,"file":"native.js","sourceRoot":"","sources":["../../src/utils/native.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AACtD,OAAO,EAAE,kCAAkC,EAAE,MAAM,UAAU,CAAC;AAC9D,OAAO,SAAS,MAAM,aAAa,CAAC;AAKpC,MAAM,cAAc,GAA8B,EAAE,CAAC;AAErD;;;;GAIG;AACH,MAAM,cAAc,GAAG,CAAC,YAAoB,EAAE,YAAmB,EAAU,EAAE;IAC3E,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAE1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QAClD,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAC1B,IAAI,OAAO,YAAY,CAAC,MAAM,CAAC,KAAK,UAAU,EAAE;YAC9C,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,YAAY,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;SACnF;aAAM;YACL,MAAM,CAAC,MAAM,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;SACvC;KACF;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,MAAkB,EAAU,EAAE,CACrD,GAAG,MAAM,CAAC,kBAAkB,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;AAExE,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,MAAkB,EAAU,EAAE,CAC5D,cAAc,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;AAE1C,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,MAAkB,EAClB,MAA4B,EAC5B,iBAA0B,EAClB,EAAE;IACV,MAAM,EACJ,UAAU,EACV,kBAAkB,EAClB,mBAAmB,EACnB,iBAAiB,EACjB,SAAS,GACV,GAAG,MAAM,CAAC;IACX,MAAM,YAAY,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC;IACpD,MAAM,GAAG,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;IAEpC,IAAI,CAAC,YAAY,IAAI,SAAS,KAAK,OAAO,EAAE;QAC1C,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,oBAAoB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC;KAChF;IAED,6CAA6C;IAC7C,4CAA4C;IAC5C,MAAM,YAAY,GAA8B,EAAE,CAAC;IAEnD,IAAI,kBAAkB,EAAE;QACtB,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KACpC;IAED,IAAI,mBAAmB,IAAI,iBAAiB,EAAE;QAC5C,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;KACtC;IAED,IAAI,YAAY,CAAC,MAAM,EAAE;QACvB,cAAc,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;KAClE;SAAM;QACL,cAAc,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;KACpC;IAED,kCAAkC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAEnD,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC;AAC7B,CAAC,CAAC","sourcesContent":["import { NativeModulesProxy } from '@unimodules/core';\nimport { initialiseNativeModuleEventEmitter } from './events';\nimport INTERNALS from './internals';\n\nimport ModuleBase from './ModuleBase';\nimport { FirebaseModuleConfig } from '../types';\n\nconst NATIVE_MODULES: { [key: string]: Object } = {};\n\n/**\n * Prepends all arguments in prependArgs to all native method calls\n * @param NativeModule\n * @param argToPrepend\n */\nconst nativeWithArgs = (NativeModule: Object, argToPrepend: any[]): Object => {\n  const native = {};\n  const methods = Object.keys(NativeModule);\n\n  for (let i = 0, len = methods.length; i < len; i++) {\n    const method = methods[i];\n    if (typeof NativeModule[method] === 'function') {\n      native[method] = (...args) => NativeModule[method](...[...argToPrepend, ...args]);\n    } else {\n      native[method] = NativeModule[method];\n    }\n  }\n\n  return native;\n};\n\nconst nativeModuleKey = (module: ModuleBase): string =>\n  `${module._customUrlOrRegion || module.app.name}:${module.namespace}`;\n\nexport const getNativeModule = (module: ModuleBase): Object =>\n  NATIVE_MODULES[nativeModuleKey(module)];\n\nexport const initialiseNativeModule = (\n  module: ModuleBase,\n  config: FirebaseModuleConfig,\n  customUrlOrRegion?: string\n): Object => {\n  const {\n    moduleName,\n    hasMultiAppSupport,\n    hasCustomUrlSupport,\n    hasRegionsSupport,\n    namespace,\n  } = config;\n  const nativeModule = NativeModulesProxy[moduleName];\n  const key = nativeModuleKey(module);\n\n  if (!nativeModule && namespace !== 'utils') {\n    throw new Error(INTERNALS.STRINGS.ERROR_MISSING_MODULE(namespace, moduleName));\n  }\n\n  // used by the modules that extend ModuleBase\n  // to access their native module counterpart\n  const argToPrepend: Array<string | undefined> = [];\n\n  if (hasMultiAppSupport) {\n    argToPrepend.push(module.app.name);\n  }\n\n  if (hasCustomUrlSupport || hasRegionsSupport) {\n    argToPrepend.push(customUrlOrRegion);\n  }\n\n  if (argToPrepend.length) {\n    NATIVE_MODULES[key] = nativeWithArgs(nativeModule, argToPrepend);\n  } else {\n    NATIVE_MODULES[key] = nativeModule;\n  }\n\n  initialiseNativeModuleEventEmitter(module, config);\n\n  return NATIVE_MODULES[key];\n};\n"]}