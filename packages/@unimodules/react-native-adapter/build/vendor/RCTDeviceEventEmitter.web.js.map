{"version":3,"file":"RCTDeviceEventEmitter.web.js","sourceRoot":"","sources":["../../src/vendor/RCTDeviceEventEmitter.web.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,uBAAuB,MAAM,+DAA+D,CAAC;AACpG,OAAO,YAAY,MAAM,oDAAoD,CAAC;AAE9E,SAAS,sBAAsB,CAAC,SAAkB;IAChD,IAAI,SAAS,EAAE;QACb,IAAI,SAAS,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE;YAC/C,MAAM,IAAI,KAAK,CAAC,GAAG,GAAG,SAAS,GAAG,0DAA0D,CAAC,CAAC;SAC/F;QACD,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE;YAC9C,MAAM,IAAI,KAAK,CAAC,GAAG,GAAG,SAAS,GAAG,sDAAsD,CAAC,CAAC;SAC3F;QACD,IAAI,SAAS,KAAK,mBAAmB,IAAI,SAAS,KAAK,eAAe,EAAE;YACtE,MAAM,IAAI,KAAK,CAAC,GAAG,GAAG,SAAS,GAAG,sDAAsD,CAAC,CAAC;SAC3F;KACF;AACH,CAAC;AAED;;;GAGG;AACH,MAAM,qBAAsB,SAAQ,YAAY;IAG9C;QACE,MAAM,gBAAgB,GAAG,IAAI,uBAAuB,EAAE,CAAC;QACvD,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACxB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC3C,CAAC;IAED,WAAW,CAAC,SAAiB,EAAE,QAAa,EAAE,OAAa;QACzD,IAAI,OAAO,EAAE;YACX,sBAAsB,CAAC,SAAS,CAAC,CAAC;SACnC;QACD,OAAO,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC;IAED,kBAAkB,CAAC,SAAkB;QACnC,IAAI,OAAO,EAAE;YACX,sBAAsB,CAAC,SAAS,CAAC,CAAC;SACnC;QACD,KAAK,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;IACtC,CAAC;IAED,kBAAkB,CAAC,YAAY;QAC7B,IAAI,YAAY,CAAC,OAAO,KAAK,IAAI,EAAE;YACjC,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;SACvD;aAAM;YACL,KAAK,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;SACxC;IACH,CAAC;CACF;AAED,eAAe,IAAI,qBAAqB,EAAE,CAAC","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport EventSubscriptionVendor from 'react-native/Libraries/vendor/emitter/EventSubscriptionVendor';\nimport EventEmitter from 'react-native/Libraries/vendor/emitter/EventEmitter';\n\nfunction checkNativeEventModule(eventType?: string) {\n  if (eventType) {\n    if (eventType.lastIndexOf('statusBar', 0) === 0) {\n      throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');\n    }\n    if (eventType.lastIndexOf('keyboard', 0) === 0) {\n      throw new Error('`' + eventType + '` event should be registered via the Keyboard module');\n    }\n    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {\n      throw new Error('`' + eventType + '` event should be registered via the AppState module');\n    }\n  }\n}\n\n/**\n * Deprecated - subclass NativeEventEmitter to create granular event modules instead of\n * adding all event listeners directly to RCTDeviceEventEmitter.\n */\nclass RCTDeviceEventEmitter extends EventEmitter {\n  sharedSubscriber: EventSubscriptionVendor;\n\n  constructor() {\n    const sharedSubscriber = new EventSubscriptionVendor();\n    super(sharedSubscriber);\n    this.sharedSubscriber = sharedSubscriber;\n  }\n\n  addListener(eventType: string, listener: any, context?: any) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    return super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType?: string) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription) {\n    if (subscription.emitter !== this) {\n      subscription.emitter.removeSubscription(subscription);\n    } else {\n      super.removeSubscription(subscription);\n    }\n  }\n}\n\nexport default new RCTDeviceEventEmitter();\n"]}