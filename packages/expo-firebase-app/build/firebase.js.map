{"version":3,"file":"firebase.js","sourceRoot":"","sources":["../src/firebase.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AACtD,OAAO,SAAS,MAAM,WAAW,CAAC;AAClC,OAAO,IAAI,MAAM,cAAc,CAAC;AAChC,OAAO,SAAS,MAAM,mBAAmB,CAAC;AAE1C,OAAO,EAAE,kBAAkB,EAAE,MAAM,aAAa,CAAC;AAGjD,OAAO,iBAAiB,MAAM,2BAA2B,CAAC;AAqB1D,qCAAqC;AACrC,MAAM,OAAO,GAAG,OAAO,CAAC;AAExB,MAAM,EAAE,eAAe,EAAE,GAAG,kBAAkB,CAAC;AAE/C,SAAS,mBAAmB,CAAC,QAAQ,EAAE,SAAS;IAC9C,OAAO;QACL,SAAS,CACP,SAAS,IAAI,kBAAkB,EAC/B,0BAA0B,SAAS,4BAA4B,CAChE,CAAC;QACF,MAAM,YAAY,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAClD,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,YAAY,CAAC,OAAO,EAAE,YAAY,CAAC,WAAW,CAAC,CAAC;QAChG,QAAQ,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;QAC7B,OAAO,MAAM,EAAE,CAAC;IAClB,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,QAAQ;IAiCZ;QACE,SAAS,CAAC,eAAe,EAAE,SAAS,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QAEjE,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YAC9C,IAAI,CAAC,SAAS,CAAC,GAAG,mBAAmB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACH,aAAa,CAAC,OAAwB,EAAE,IAAY;QAClD,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;;;;OAQG;IACH,GAAG,CAAC,IAAa;QACf,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH,IAAI,WAAW;QACb,OAAO,OAAO,CAAC;IACjB,CAAC;CACF;AAED,eAAe,IAAI,QAAQ,EAAE,CAAC","sourcesContent":["import { NativeModulesProxy } from '@unimodules/core';\nimport invariant from 'invariant';\nimport APPS from './utils/apps';\nimport INTERNALS from './utils/internals';\nimport App from './app';\nimport { FirebaseNamespaces } from './constants';\nimport { FirebaseOptions } from './types';\n\nimport getModuleInstance from './utils/getModuleInstance';\n\nimport {\n  AdMobModule,\n  AnalyticsModule,\n  AuthModule,\n  ConfigModule,\n  CrashlyticsModule,\n  DatabaseModule,\n  FirestoreModule,\n  FunctionsModule,\n  InstanceIdModule,\n  InvitesModule,\n  LinksModule,\n  MessagingModule,\n  NotificationsModule,\n  PerformanceModule,\n  StorageModule,\n  UtilsModule,\n} from './module.types';\n\n// TODO: Evan: Read Firebase version.\nconst VERSION = '5.0.0';\n\nconst { ExpoFirebaseApp } = NativeModulesProxy;\n\nfunction createDefaultModule(instance, namespace) {\n  return function() {\n    invariant(\n      namespace in FirebaseNamespaces,\n      `FirebaseApp: Internal: ${namespace} is not a valid namespace.`\n    );\n    const InstanceType = getModuleInstance(namespace);\n    const module = APPS.moduleAndStatics(namespace, InstanceType.statics, InstanceType.MODULE_NAME);\n    instance[namespace] = module;\n    return module();\n  };\n}\n\nclass Firebase {\n  // admob: AdMobModule;\n\n  analytics: AnalyticsModule;\n\n  auth: AuthModule;\n\n  config: ConfigModule;\n\n  crashlytics: CrashlyticsModule;\n\n  database: DatabaseModule;\n\n  firestore: FirestoreModule;\n\n  functions: FunctionsModule;\n\n  iid: InstanceIdModule;\n\n  invites: InvitesModule;\n\n  links: LinksModule;\n\n  messaging: MessagingModule;\n\n  notifications: NotificationsModule;\n\n  perf: PerformanceModule;\n\n  storage: StorageModule;\n\n  utils: UtilsModule;\n\n  constructor() {\n    invariant(ExpoFirebaseApp, INTERNALS.STRINGS.ERROR_MISSING_CORE);\n\n    APPS.initializeNativeApps();\n\n    Object.keys(FirebaseNamespaces).map(namespace => {\n      this[namespace] = createDefaultModule(this, namespace);\n    });\n  }\n\n  /**\n   * Web SDK initializeApp\n   *\n   * @param options\n   * @param name\n   * @return {*}\n   */\n  initializeApp(options: FirebaseOptions, name: string): App {\n    return APPS.initializeApp(options, name);\n  }\n\n  /**\n   * Retrieves a Firebase app instance.\n   *\n   * When called with no arguments, the default app is returned.\n   * When an app name is provided, the app corresponding to that name is returned.\n   *\n   * @param name\n   * @return {*}\n   */\n  app(name?: string): App {\n    return APPS.app(name);\n  }\n\n  /**\n   * A (read-only) array of all initialized apps.\n   * @return {Array}\n   */\n  get apps(): App[] {\n    return APPS.apps();\n  }\n\n  /**\n   * The current SDK version.\n   * @return {string}\n   */\n  get SDK_VERSION(): string {\n    return VERSION;\n  }\n}\n\nexport default new Firebase();\n"]}