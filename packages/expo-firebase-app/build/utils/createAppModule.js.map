{"version":3,"file":"createAppModule.js","sourceRoot":"","sources":["../../src/utils/createAppModule.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAE5C,OAAO,EAAE,WAAW,EAAE,+BAA+B,EAAE,MAAM,YAAY,CAAC;AAC1E,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AACpD,OAAO,SAAS,MAAM,aAAa,CAAC;AAMpC,MAAM,SAAS,GAAG,QAAQ,CAAC,EAAE,KAAK,SAAS,CAAC;AAE5C;;;;;;;GAOG;AAEH,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,GAAQ,EACR,SAAc,EACd,aAAmB,EACJ,EAAE;IACjB,OAAO,CAAC,oBAAmC,IAAI,EAAK,EAAE;QACpD,IAAI,iBAAiB,IAAI,CAAC,+BAA+B,CAAC,SAAS,CAAC,EAAE;YACpE,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,kCAAkC,CAAC,SAAS,CAAC,CAAC,CAAC;SAClF;QAED,MAAM,qBAAqB,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,iBAAiB,IAAI,EAAE,EAAE,CAAC;QAEtE,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,EAAE;YACvC,WAAW,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC;SACzC;QAED,IAAI,SAAS,IAAI,SAAS,KAAK,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,mBAAmB,EAAE;YAC9E,SAAS,CAAC,KAAK,CAAC,mBAAmB,GAAG,IAAI,CAAC;YAC3C,GAAG,CAAC,KAAK,EAAE,CAAC,6BAA6B,EAAE,CAAC;SAC7C;QAED,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC,SAAS,CAAC,EAAE;YAClD,IAAI,CAAC,aAAa,EAAE;gBAClB,aAAa,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;aAC9C;YACD,WAAW,CAAC,qBAAqB,CAAC,CAAC,SAAS,CAAC,GAAG,IAAI,aAAa,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;SAC3F;QAED,OAAO,WAAW,CAAC,qBAAqB,CAAC,CAAC,SAAS,CAAC,CAAC;IACvD,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { Platform } from '@unimodules/core';\n\nimport { APP_MODULES, CUSTOM_URL_OR_REGION_NAMESPACES } from './appStore';\nimport getModuleInstance from './getModuleInstance';\nimport INTERNALS from './internals';\nimport { FirebaseModule } from '../types';\ntype App = any;\n\ntype ModuleFactory = () => FirebaseModule;\n\nconst isAndroid = Platform.OS === 'android';\n\n/**\n *\n * @param app\n * @param namespace\n * @param InstanceClass\n * @return {function()}\n * @private\n */\n\nexport const createAppModule = <M>(\n  app: App,\n  namespace: any,\n  InstanceClass?: any\n): ModuleFactory => {\n  return (customUrlOrRegion: string | null = null): M => {\n    if (customUrlOrRegion && !CUSTOM_URL_OR_REGION_NAMESPACES[namespace]) {\n      throw new Error(INTERNALS.STRINGS.ERROR_INIT_SERVICE_URL_UNSUPPORTED(namespace));\n    }\n\n    const appInstanceIdentifier = `${app.name}${customUrlOrRegion || ''}`;\n\n    if (!APP_MODULES[appInstanceIdentifier]) {\n      APP_MODULES[appInstanceIdentifier] = {};\n    }\n\n    if (isAndroid && namespace !== 'utils' && !INTERNALS.FLAGS.checkedPlayServices) {\n      INTERNALS.FLAGS.checkedPlayServices = true;\n      app.utils().checkPlayServicesAvailability();\n    }\n\n    if (!APP_MODULES[appInstanceIdentifier][namespace]) {\n      if (!InstanceClass) {\n        InstanceClass = getModuleInstance(namespace);\n      }\n      APP_MODULES[appInstanceIdentifier][namespace] = new InstanceClass(app, customUrlOrRegion);\n    }\n\n    return APP_MODULES[appInstanceIdentifier][namespace];\n  };\n};\n"]}