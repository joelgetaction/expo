{"version":3,"file":"NativeEventEmitter.web.js","sourceRoot":"","sources":["../../src/vendor/NativeEventEmitter.web.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AACH,YAAY,CAAC;AACb,OAAO,SAAS,MAAM,oBAAoB,CAAC;AAE3C,OAAO,YAAY,MAAM,oDAAoD,CAAC;AAC9E,OAAO,qBAAqB,MAAM,6BAA6B,CAAC;AAEhE;;;GAGG;AACH,MAAM,kBAAmB,SAAQ,YAAY;IAG3C,YAAY,YAAkB;QAC5B,KAAK,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;IAChD,CAAC;IAED,WAAW,CAAC,SAAiB,EAAE,QAAkC,EAAE,OAAa;QAC9E,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;YAC9B,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;SAC3C;QACD,OAAO,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC;IAED,kBAAkB,CAAC,SAAiB;QAClC,SAAS,CAAC,SAAS,EAAE,iCAAiC,CAAC,CAAC;QACxD,MAAM,KAAK,GAAI,IAAY,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;QACxD,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;YAC9B,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;SAC3C;QACD,KAAK,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;IACtC,CAAC;IAED,kBAAkB,CAAC,YAAY;QAC7B,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;YAC9B,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;SACvC;QACD,KAAK,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;IACzC,CAAC;CACF;AAED,eAAe,kBAAkB,CAAC","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule NativeEventEmitter\n * @flow\n */\n'use strict';\nimport invariant from 'fbjs/lib/invariant';\n\nimport EventEmitter from 'react-native/Libraries/vendor/emitter/EventEmitter';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter.web';\n\n/**\n * Abstract base class for implementing event-emitting modules. This implements\n * a subset of the standard EventEmitter node module API.\n */\nclass NativeEventEmitter extends EventEmitter {\n  _nativeModule?: any;\n\n  constructor(nativeModule?: any) {\n    super(RCTDeviceEventEmitter.sharedSubscriber);\n  }\n\n  addListener(eventType: string, listener: (...props: any[]) => any, context?: any): any {\n    if (this._nativeModule != null) {\n      this._nativeModule.addListener(eventType);\n    }\n    return super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType: string) {\n    invariant(eventType, 'eventType argument is required.');\n    const count = (this as any).listeners(eventType).length;\n    if (this._nativeModule != null) {\n      this._nativeModule.removeListeners(count);\n    }\n    super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription) {\n    if (this._nativeModule != null) {\n      this._nativeModule.removeListeners(1);\n    }\n    super.removeSubscription(subscription);\n  }\n}\n\nexport default NativeEventEmitter;\n"]}